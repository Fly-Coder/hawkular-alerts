/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.hawkular.alerts.api.model.event;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.List;
import java.util.Set;

import org.hawkular.alerts.api.model.Severity;
import org.hawkular.alerts.api.model.condition.ConditionEval;
import org.hawkular.alerts.api.model.dampening.Dampening;
import org.hawkular.alerts.api.model.trigger.Trigger;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Alerts and Events share this set of attributes.  For the most part an Event can be thought of as an Alert
 * without life-cycle. Alerts are always generated by a Trigger. Events may be generated by a Trigger or may
 * be created directly via the API.
 *
 * @author Jay Shaughnessy
 * @author Lucas Ponce
 */
public abstract class AbstractEvent {

    /**
     * Used to annotate fields that should be thinned in order to return/deserialize a lightweight Alert
     */
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Thin {
    }

    @JsonInclude
    protected String tenantId;

    @JsonInclude
    protected String id;

    @JsonInclude
    protected long ctime;

    @JsonInclude
    private Severity severity;

    // The Trigger generating the Alert (required) or Event (optional), as defined when the alert was fired (@ctime)
    @JsonInclude(Include.NON_EMPTY)
    private Trigger trigger;

    // Null for API-generated Events. Otherwise the Eval Sets that fired the trigger
    @JsonInclude(Include.NON_EMPTY)
    @Thin
    private List<Set<ConditionEval>> evalSets;

    /*
     * This is the dampening attached to a trigger when the alert was fired (@ctime)
     * As a trigger, the dampening can change during time, but an alert should be attached with a specific instance.
     */
    // Null for API-generated Events. Otherwise the Dampening defined when the alert was fired (@ctime)
    @JsonInclude(Include.NON_EMPTY)
    @Thin
    private Dampening dampening;

    public AbstractEvent() {
        // for json assembly
    }

    public AbstractEvent(String tenantId, String id, Severity severity) {
        this.tenantId = tenantId;
        this.id = id;
        this.severity = (null == severity) ? Severity.MEDIUM : severity;

        this.ctime = System.currentTimeMillis();
    }

    public AbstractEvent(String tenantId, Trigger trigger, Dampening dampening, List<Set<ConditionEval>> evalSets) {
        this.tenantId = tenantId;
        this.severity = trigger.getSeverity();
        this.dampening = dampening;
        this.evalSets = evalSets;

        this.ctime = System.currentTimeMillis();
    }

    public String getTenantId() {
        return tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }


    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public long getCtime() {
        return ctime;
    }

    public void setCtime(long ctime) {
        this.ctime = ctime;
    }

    public Severity getSeverity() {
        return severity;
    }

    public void setSeverity(Severity severity) {
        this.severity = severity;
    }

    public Trigger getTrigger() {
        return trigger;
    }

    public void setTrigger(Trigger trigger) {
        this.trigger = trigger;
    }

    public Dampening getDampening() {
        return dampening;
    }

    public void setDampening(Dampening dampening) {
        this.dampening = dampening;
    }

    public List<Set<ConditionEval>> getEvalSets() {
        return evalSets;
    }

    public void setEvalSets(List<Set<ConditionEval>> evalSets) {
        this.evalSets = evalSets;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((tenantId == null) ? 0 : tenantId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        AbstractEvent other = (AbstractEvent) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (tenantId == null) {
            if (other.tenantId != null)
                return false;
        } else if (!tenantId.equals(other.tenantId))
            return false;
        return true;
    }


}
